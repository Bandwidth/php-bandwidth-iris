<?phpuse GuzzleHttp\Handler\MockHandler;use GuzzleHttp\HandlerStack;use GuzzleHttp\Psr7\Response;use GuzzleHttp\Middleware;class DisconnectTest extends PHPUnit_Framework_TestCase {	public function setUp() {		$mock = new MockHandler([            new Response(200, [], "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><DisconnectTelephoneNumberOrderResponse> <orderRequest>  <CustomerOrderId>Disconnect1234</CustomerOrderId>  <OrderCreateDate>2015-06-17T18:14:08.683Z</OrderCreateDate>  <id>b902dee1-0585-4258-becd-5c7e51ccf5e1</id>  <DisconnectTelephoneNumberOrderType>   <TelephoneNumberList>    <TelephoneNumber>9192755378</TelephoneNumber>    <TelephoneNumber>9192755703</TelephoneNumber>   </TelephoneNumberList>   <DisconnectMode>normal</DisconnectMode>  </DisconnectTelephoneNumberOrderType> </orderRequest> <OrderStatus>RECEIVED</OrderStatus></DisconnectTelephoneNumberOrderResponse>"),		]);        $this->container = [];        $history = Middleware::history($this->container);		$handler = HandlerStack::create($mock);        $handler->push($history);		$c = new Iris\GuzzleClient(\Iris\Config::REST_LOGIN, \Iris\Config::REST_PASS, Array('url' => \Iris\Config::REST_URL, 'handler' => $handler));		$this->account = new Iris\Account(9500249, $c);        $this->disconnects = $this->account->disconnects();	}    public function testDisconnectCreate() {        $disconnect = $this->disconnects->create(array(            "name" => "test disconnect order 4",            "CustomerOrderId" => "Disconnect1234",            "DisconnectTelephoneNumberOrderType" => array(                "TelephoneNumberList" => array(                    "TelephoneNumber" => array("9192755378", "9192755703")                )            )        ));        $disconnect->save();                $this->assertEquals("POST", $this->container[0]['request']->getMethod());        $this->assertEquals("https://api.test.inetwork.com/v1.0/accounts/9500249/disconnects", $this->container[0]['request']->getUri());        $this->assertEquals("RECEIVED", $disconnect->OrderStatus->OrderStatus);        $this->assertEquals("b902dee1-0585-4258-becd-5c7e51ccf5e1", $disconnect->OrderId);    }}/*"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><ResponseSelectWrapper><ListOrderIdUserIdDate><TotalCount>7</TotalCount><Links><!-- SNIP --></Links><OrderIdUserIdDate><CountOfTNs>1</CountOfTNs><userId>smckinnon</userId><lastModifiedDate>2014-01-10T17-34-15Z</lastModifiedDate><OrderId>6d7da966-e071-4741-b31c-1d8932f4b8da</OrderId><OrderType>disconnect</OrderType><OrderDate>2014-01-10T17-34-15.797Z</OrderDate><OrderStatus>COMPLETE</OrderStatus><TelephoneNumberDetails>    <!-- SNIP --></TelephoneNumberDetails></OrderIdUserIdDate><OrderIdUserIdDate><CountOfTNs>1</CountOfTNs><userId>jbm</userId><lastModifiedDate>2013-12-04T21-59-32Z</lastModifiedDate><OrderId>4ffe9262-1965-4479-a1d5-b8584440667d</OrderId><OrderType>disconnect</OrderType><OrderDate>2013-12-04T21-59-32.243Z</OrderDate><OrderStatus>COMPLETE</OrderStatus><TelephoneNumberDetails><!-- SNIP --></TelephoneNumberDetails></OrderIdUserIdDate></ListOrderIdUserIdDate></ResponseSelectWrapper>",*/